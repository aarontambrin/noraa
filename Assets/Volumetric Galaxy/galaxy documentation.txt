Volumetric 3d Procedural Galaxy

Introduction
Volumetric 3D Procedural Galaxy, is a fully volumetric 3 dimensional procedural galaxy with the upper limit of star numbers only being your hardware! I can run 250,000 stars at 30 fps on my laptop, or approx 100,000 at 60 fps.

All of the stars, and the galaxy as a whole have colliders, and are all selectable. I have included a raycast selection script, which will output the stars sequential number, random serial number, and transform position in the console.

Each individual star is assigned a serial number based on the order it was created, as well as a unique  6 digit random number, which can be can be used for further procedural generation. 

There are also multiple star types, colours and sizes, procedurally assigned, which can be accessed through the function stardata(float starrandomnumber). Starrandomnumber is the  random number assigned to each star. The function assigns procedural values to the global variables starsize and starcolor, as well as keeping count of how many of each star there are in total. Other procedural variables could be added by you to the code if you wish. 

There are 10 different star types, listed in order of size and based on this article on stellar classification on wikipedia:

https://en.wikipedia.org/wiki/Stellar_classification

Red Giant, Blue Giant, Deep Blue White , Pale Blue White, white, yellow white, pale orange yellow, light orange red, white dwarf, brown dwarf.


The Volumetric galaxy comes with a simple camera controller script, which is not intended as a polished product, but simply a means by which you can evaluate the asset, before implementing your own controller scripts ( although feel free to use it if you want).
The controls are the arrow keys for rotation in 4 axis, and w and s for forward and backward.

There is also a simple FPS counter to enable you too see the effect of the galaxy on your frame rate.

Setup

The galaxy comes as a prefab, and should work right out of the box. 

You can either drag the "Galaxy Scene" into the heirachy and remove any previous scene you may have already in your heirachy, or you can use the prefab  elements in your own scene  as follows: 

!. Just drag the "galaxy" prefab, located in the prefab' folder, into the game heirachy.

2. It also comes with a simple selection script, to enable you to select stars, and see the output in the console. Attach the selection script to the main camera (or whatever camera you are using with the galaxy), and drag the ‘star particles’ layer of the galaxy object into the ‘star particles’ slot on the Selection script in the inspector.

3. Setup the main camera. For best results I suggest the following: Select the main camera (or whatever camera you are using with the galaxy), and in the inspector, set ‘Clear Flags’ to ‘Solid Color’, and set the color to black. Set the near Clipping Plane to 0.01 and the far Clipping plane to 3000.
	
   Also, you ,must attach the MouseLook script to the camera object, by dragging the script from the Assets/Volumetric Galaxy/ Scripts folder to the inspector (be sure to have the camera selected in the heirachy.

4. To enable the FPS counter, drag the ""Canvas"" prefab from the prefab folder into the heirachy. If you already have a canvas, just drag the 'FPS' prefab onto your canvas in the heirachy. 
	
Usage
When you select a star by clicking the left mouse button, the console with output the following information about that star:

The stars sequential number - this is simply the stars sequential number in the order they were created. 
the stars unique random serial number - which is a unique  a randomly generated 6 digit number, which you can use for your own procedural generation as a seed number (eg solar system, planets etc... 
and the transform position of the star.

these 3 bits of data are publicly accessible in the  'selection' script.


The preset values are originally set to produce just over 48000 stars, although you can customise the values in the inspector as follows:

The galaxy settings can be accessed by selecting  ‘Star Particles’ in the heirachy (child of Galaxy).

In the inspector, you can assign values for the following:

Scale:  This sets the base scale for the galaxy. It defines the base distance – the default is 2 units , and this equates to an average distance of around 8-10 units between stars, although this varies. A scale of 1 is half of that. Scales of 3,4 or more are possible, and the overall size of the galaxy changes accordingly, as well as the average distance between stars.

Number of stars/ number of spiral particles/ number of cloud particles: these are the size of the arrays that store the stars, spiral clouds, and disc cloud particles. THEY MUST BE LARGER THAN (or at least equal to) THE NUMBER OF PARTICLES IN EACH SYSTEM.  A readout of the total number of stars, spiral cloud particles  and disc cloud particles, is printed to the console when it is played. The ‘number of stars’ array size will set an upper limit to the number of stars, even if the galaxy would otherwise produce more. For this reason, always set it larger than nescessary by a few thousand. The other 2 arrays will produce an error if they are too small. To illustrate this more clearly, a number of preset values are listed at the end of this documentation.  You can set the arrays very high to start with , and adjust them down when you have decided how big to make the galaxy. It is strongly recommended to make the arrays only slightly larger than you need to save memory and increase performance.

Random seed: enter a 3-6 digit number as the random seed for the whole galaxy. 

Ellipse offset Angle: This controls the tightness or looseness of the spiral arms. Trying adjusting small amounts. (0.1 is almost no spiral. 1 is VERY tight.)

Iterations: Basically controls how big the galaxy is. A value of 100 produces around 48,000 stars, while a value of 250 produces around 250,000 stars. Any whole integer value is valid – experiment! Limited only by your hardware! 

Star Size: controls how big the stars are. 

Console Output:

When the system is played, the following information is output on the console:

	Total size in unity units: x, y, and z.

Total number of stars in each category, in the following order:
	pale orange red, pale orange yellow, pale yellow white, white,  white dwarf, brown dwarf, 	pale blue giant, deep blue giant, blue giant, red giant.

Followed by:

	Total star particles, total spiral cloud particles, total disc cloud particles.

Suggested preset Values:

To get you started, here are some settings for various ‘Iterations’/ size of galaxy:

Iterations: 100

Number of stars (approx) 		48000		Set array to: 50000
Spiral cloud particles (approx) 	13000		Set array to: 15000
Disc cloud particles (approx)		2500		set array to: 2700


Iterations: 150

Number of stars (approx) 		107000	Set array to: 110000
Spiral cloud particles (approx) 	30000		Set array to: 32000
Disc cloud particles (approx)		7000		set array to: 9000


Iterations: 200

Number of stars (approx) 		180000	Set array to: 190000
Spiral cloud particles (approx) 	52000		Set array to: 55000
Disc cloud particles (approx)		13000		set array to: 15000


Iterations: 250

Number of stars (approx) 		255000	Set array to: 270000
Spiral cloud particles (approx) 	75000		Set array to: 80000
Disc cloud particles (approx)		22000		set array to: 25000



So, there you have it...

Enjoy!		
	




